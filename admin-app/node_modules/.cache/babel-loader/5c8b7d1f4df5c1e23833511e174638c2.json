{"ast":null,"code":"import { categoryConstants } from \"../actions/constants\";\nconst initState = {\n  categories: [],\n  loading: false,\n  error: null\n};\n\nconst buildNewCategories = (parentId, categories, category) => {\n  let myCategories = [];\n\n  if (parentId == undefined) {\n    return [...categories, {\n      _id: category._id,\n      name: category.name,\n      slug: category.slug,\n      type: category.type,\n      children: []\n    }];\n  }\n\n  for (let cat of categories) {\n    if (cat._id == parentId) {\n      const newCategory = {\n        _id: category._id,\n        name: category.name,\n        slug: category.slug,\n        parentId: category.parentId,\n        type: category.type,\n        children: []\n      };\n      myCategories.push({ ...cat,\n        children: cat.children.length > 0 ? [...cat.children, newCategory] : [newCategory]\n      });\n    } else {\n      myCategories.push({ ...cat,\n        children: cat.children ? buildNewCategories(parentId, cat.children, category) : []\n      });\n    }\n  }\n\n  return myCategories;\n};\n\nexport default ((state = initState, action) => {\n  switch (action.type) {\n    case categoryConstants.GET_ALL_CATEGORIES_SUCCESS:\n      state = { ...state,\n        categories: action.payload.categories\n      };\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_REQUEST:\n      state = { ...state,\n        loading: true\n      };\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_SUCCESS:\n      const category = action.payload.category;\n      const updatedCategories = buildNewCategories(category.parentId, state.categories, action.payload.category);\n      console.log('updated categories', updatedCategories);\n      state = { ...state,\n        categories: updatedCategories,\n        loading: false\n      };\n      break;\n\n    case categoryConstants.ADD_NEW_CATEGORY_FAILURE:\n      state = { ...initState\n      };\n      break;\n  }\n\n  return state;\n});","map":{"version":3,"sources":["D:/Work/Internship/test1/admin-app/src/reducers/category.reducer.js"],"names":["categoryConstants","initState","categories","loading","error","buildNewCategories","parentId","category","myCategories","undefined","_id","name","slug","type","children","cat","newCategory","push","length","state","action","GET_ALL_CATEGORIES_SUCCESS","payload","ADD_NEW_CATEGORY_REQUEST","ADD_NEW_CATEGORY_SUCCESS","updatedCategories","console","log","ADD_NEW_CATEGORY_FAILURE"],"mappings":"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","sourcesContent":["import { categoryConstants } from \"../actions/constants\";\r\n\r\nconst initState = {\r\n    categories: [],\r\n    loading: false,\r\n    error: null\r\n};\r\n\r\nconst buildNewCategories = (parentId, categories, category) => {\r\n    let myCategories = [];\r\n\r\n    if(parentId == undefined){\r\n        return [\r\n            ...categories,\r\n            {\r\n                _id: category._id,\r\n                name: category.name,\r\n                slug: category.slug,\r\n                type: category.type,\r\n                children: []\r\n            }\r\n        ];\r\n    }\r\n    \r\n    for(let cat of categories){\r\n\r\n        if(cat._id == parentId){\r\n            const newCategory = {\r\n                _id: category._id,\r\n                name: category.name,\r\n                slug: category.slug,\r\n                parentId: category.parentId,\r\n                type: category.type,\r\n                children: []\r\n            };\r\n            myCategories.push({\r\n                ...cat,\r\n                children: cat.children.length > 0 ? [...cat.children, newCategory] : [newCategory]\r\n            })\r\n        }else{\r\n            myCategories.push({\r\n                ...cat,\r\n                children: cat.children ? buildNewCategories(parentId, cat.children, category) : []\r\n            });\r\n        }\r\n\r\n        \r\n    }\r\n\r\n\r\n    return myCategories;\r\n}\r\n\r\n\r\nexport default (state = initState, action) => {\r\n    switch(action.type){\r\n        case categoryConstants.GET_ALL_CATEGORIES_SUCCESS:\r\n            state = {\r\n                ...state,\r\n                categories: action.payload.categories\r\n            }\r\n            break;\r\n        case categoryConstants.ADD_NEW_CATEGORY_REQUEST:\r\n            state = {\r\n                ...state,\r\n                loading: true\r\n            }\r\n            break;\r\n        case categoryConstants.ADD_NEW_CATEGORY_SUCCESS:\r\n            const category = action.payload.category;\r\n            const updatedCategories = buildNewCategories(category.parentId,state.categories, action.payload.category);\r\n            console.log('updated categories',updatedCategories);\r\n             \r\n            state = {\r\n                ...state,\r\n                categories: updatedCategories,\r\n                loading: false, \r\n            }\r\n            break;\r\n        case categoryConstants.ADD_NEW_CATEGORY_FAILURE:\r\n            state = {\r\n                ...initState\r\n            }\r\n            break;\r\n    }\r\n    return state;\r\n}"]},"metadata":{},"sourceType":"module"}